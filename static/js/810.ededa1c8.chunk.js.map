{"version":3,"file":"static/js/810.ededa1c8.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.js","components/MovieList/MovieList.styled.js","components/SearchMovies/SearchMovies.styled.js","components/SearchMovies/SearchMovies.js","pages/MoviesPage.js","services/api.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { StyledSection, StyledLink, List, ListItem } from './MovieList.styled'; // додаємо стилі\nimport { useLocation } from 'react-router-dom';\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <StyledSection>\n      <List>\n        {movies.map(({ id, title, name }) => (\n          <ListItem key={id}>\n            <StyledLink to={`/movies/${id}`} state={{ from: location }}>\n              {title || name}\n            </StyledLink>\n          </ListItem>\n        ))}\n      </List>\n    </StyledSection>\n  );\n};\n\nexport default MovieList;\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string,\n      name: PropTypes.string,\n      release_date: PropTypes.string.isRequired,\n      overview: PropTypes.string.isRequired,\n      poster_path: PropTypes.string,\n      vote_average: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n};\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const StyledSection = styled.section`\n  padding-right: 50px;\n  padding-left: 50px;\n`;\n\nexport const SectionTitle = styled.h2`\n  margin-top: 30px;\n  margin-bottom: 30px;\n  padding-left: 5px;\n  font-size: 30px;\n  font-weight: 600;\n  text-align: center;\n`;\n\nexport const List = styled.ul`\n  list-style: disc;\n  color: #0d57aa;\n`;\n\nexport const ListItem = styled.li`\n  &:not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n\nexport const StyledLink = styled(Link)`\n  font-size: 20px;\n  color: #0d57aa;\n  transition: color 0.2s ease-in-out, border-bottom 0.2s ease-in-out;\n\n  &:hover,\n  &:focus {\n    color: #1c85ff;\n    border-bottom: 2px solid #1c85ff;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 20px;\n`;\n\nexport const Input = styled.input`\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  padding: 8px;\n  margin-right: 15px;\n  font-size: 16px;\n`;\n\nexport const Button = styled.button`\n  background-color: #b5d1f2;\n  border: 1px solid #0d57aa;\n  border-radius: 4px;\n  padding: 8px 18px;\n  font-size: 16px;\n  cursor: pointer;\n  transition: background-color 0.2s ease-in-out, color 0.2s ease-in-out;\n\n  &:hover,\n  &:focus {\n    background-color: #0d57aa;\n    color: #ffffff;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport { Button, Form, Input } from './SearchMovies.styled';\n\n// додаємо функціонал для пошуку фільмів\nconst SearchMovies = ({ onSubmit }) => {\n  const handleSubmit = evt => {\n    evt.preventDefault(); // відміняємо стандартну поведінку браузера\n\n    const query = evt.target.elements.query.value.trim(); // додаємо доступ до значення поля пошуку\n\n    // додаємо перевірку на наявність значення в полі пошуку\n    if (!query) {\n      toast.error('Please enter something');\n      evt.target.reset();\n      return;\n    }\n\n    onSubmit(query);\n    evt.target.reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Input name=\"query\" type=\"text\" placeholder=\"Search movies\" />\n      <Button type=\"submit\">Search</Button>\n    </Form>\n  );\n};\n\n// додаємо перевірку на типи пропсів\nSearchMovies.propTypes = { onSubmit: PropTypes.func.isRequired };\n\nexport default SearchMovies;\n","import React, { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom'; // додаємо хук для роботи з параметрами URL\nimport { toast } from 'react-toastify'; // імпортуємо плагін для сповіщень\nimport { fetchMovieByName } from '../services/api';\nimport SearchMovies from '../components/SearchMovies/SearchMovies';\nimport { LoadingIndicator } from 'components/SharedLayout/LoadingDots';\nimport MovieList from 'components/MovieList/MovieList';\n\nimport {\n  SectionTitle,\n  StyledSection,\n} from '../components/MovieList/MovieList.styled'; // імпортуємо стилі\n\nconst MoviesPage = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  // додаємо запит на фільм\n  useEffect(() => {\n    const query = searchParams.get('query') ?? ''; // щоб не було помилки, якщо query не буде в URL\n    if (!query) return;\n\n    // додаємо сповіщення про пошук\n    const getMovie = async () => {\n      try {\n        setIsLoading(true);\n        const { results } = await fetchMovieByName(query);\n\n        // додаємо сповіщення, якщо фільмів не знайдено\n        if (results.length === 0) {\n          toast.dismiss(); // очищаємо попереднє сповіщення\n          toast.error('No movies found');\n          setMovies([]); // очищаємо масив фільмів\n        } else {\n          setMovies(results); // записуємо масив фільмів\n        }\n      } catch (error) {\n        setError(true);\n        toast.error(error.message);\n        setMovies([]);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    // додаємо запит на фільм\n    getMovie();\n  }, [searchParams]);\n\n  // додаємо функцію для пошуку фільму\n  const handleSubmit = query => {\n    setSearchParams({ query }); // записуємо query в URL\n  };\n\n  return (\n    <main>\n      <StyledSection>\n        <SectionTitle>Movies Page</SectionTitle>\n        <SearchMovies onSubmit={handleSubmit} />\n        {/* додаємо компонент для пошуку фільму */}\n        {movies.length > 0 && <MovieList movies={movies} />}\n        {isLoading && <LoadingIndicator />}\n        {error && <h2>Sorry we didn't find this page</h2>}\n      </StyledSection>\n    </main>\n  );\n};\nexport default MoviesPage;\n","import axios from 'axios';\n\nconst baseURL = 'https://api.themoviedb.org';\nconst API_KEY = '5bfce8d761ea605a18e9b0d713eafd56';\n\nexport const fetchTrendMovies = async () => {\n  const { data } = await axios.get(\n    `${baseURL}/3/trending/movie/day?api_key=${API_KEY}`\n  );\n\n  return data;\n};\n\nexport const fetchMovieByName = async query => {\n  const { data } = await axios.get(\n    `${baseURL}/3/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n\n  return data;\n};\n\nexport const fetchMovieById = async movieId => {\n  const { data } = await axios.get(\n    `${baseURL}/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\nexport const fetchMovieCast = async movieId => {\n  const { data } = await axios.get(\n    `${baseURL}/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const { data } = await axios.get(\n    `${baseURL}/3/movie/${movieId}}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n\n  return data;\n};\n"],"names":["movies","location","useLocation","map","id","title","name","to","state","from","StyledSection","styled","SectionTitle","List","ListItem","StyledLink","Link","Form","Input","Button","onSubmit","evt","preventDefault","query","target","elements","value","trim","toast","reset","type","placeholder","useState","isLoading","setIsLoading","error","setError","setMovies","useSearchParams","searchParams","setSearchParams","useEffect","get","getMovie","fetchMovieByName","results","length","message","MovieList","baseURL","API_KEY","fetchTrendMovies","axios","data","fetchMovieById","movieId","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}